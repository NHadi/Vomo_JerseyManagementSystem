basePath: /api
definitions:
  gin.H:
    additionalProperties: {}
    type: object
  internal_handlers.CreateMenuRequest:
    properties:
      icon:
        type: string
      name:
        type: string
      parent_id:
        type: integer
      sort:
        type: integer
      url:
        type: string
    required:
    - name
    type: object
  internal_handlers.CreateUserRequest:
    properties:
      email:
        type: string
      password:
        minLength: 6
        type: string
      role_id:
        type: integer
      username:
        type: string
    required:
    - email
    - password
    - role_id
    - username
    type: object
  internal_handlers.ErrorResponse:
    properties:
      error:
        type: string
    type: object
  internal_handlers.LoginRequest:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  internal_handlers.LoginResponse:
    properties:
      menus:
        items:
          $ref: '#/definitions/internal_handlers.MenuResponse'
        type: array
      token:
        type: string
      user:
        $ref: '#/definitions/internal_handlers.UserResponse'
    type: object
  internal_handlers.MenuResponse:
    properties:
      children:
        items:
          $ref: '#/definitions/internal_handlers.MenuResponse'
        type: array
      icon:
        type: string
      id:
        type: integer
      name:
        type: string
      parent_id:
        type: integer
      url:
        type: string
    type: object
  internal_handlers.UpdateMenuRequest:
    properties:
      icon:
        type: string
      name:
        type: string
      parent_id:
        type: integer
      sort:
        type: integer
      url:
        type: string
    required:
    - name
    type: object
  internal_handlers.UpdateUserRequest:
    properties:
      email:
        type: string
      username:
        type: string
    required:
    - email
    - username
    type: object
  internal_handlers.UserResponse:
    properties:
      email:
        type: string
      id:
        type: string
      role_id:
        type: integer
      username:
        type: string
    type: object
host: localhost:8080
info:
  contact: {}
  description: Vomo API Documentation
  title: Vomo API
  version: "1.0"
paths:
  /auth/login:
    post:
      consumes:
      - application/json
      description: Authenticate user with email and password
      parameters:
      - description: Login Credentials
        in: body
        name: credentials
        required: true
        schema:
          $ref: '#/definitions/internal_handlers.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/internal_handlers.LoginResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/internal_handlers.ErrorResponse'
      summary: User login
      tags:
      - auth
  /menus:
    get:
      description: Get all menu items
      parameters:
      - description: Tenant ID
        in: header
        name: X-Tenant-ID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/internal_handlers.MenuResponse'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      security:
      - BearerAuth: []
      summary: Get all menus
      tags:
      - Menu
    post:
      consumes:
      - application/json
      description: Create a new menu item
      parameters:
      - description: Tenant ID
        in: header
        name: X-Tenant-ID
        required: true
        type: string
      - description: Menu Data
        in: body
        name: menu
        required: true
        schema:
          $ref: '#/definitions/internal_handlers.CreateMenuRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/internal_handlers.MenuResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      security:
      - BearerAuth: []
      summary: Create a new menu
      tags:
      - Menu
  /menus/{id}:
    delete:
      description: Delete an existing menu item
      parameters:
      - description: Tenant ID
        in: header
        name: X-Tenant-ID
        required: true
        type: string
      - description: Menu ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/gin.H'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/gin.H'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      security:
      - BearerAuth: []
      summary: Delete a menu
      tags:
      - Menu
    get:
      description: Get menu details by ID
      parameters:
      - description: Tenant ID
        in: header
        name: X-Tenant-ID
        required: true
        type: string
      - description: Menu ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/internal_handlers.MenuResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/gin.H'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      security:
      - BearerAuth: []
      summary: Get a menu by ID
      tags:
      - Menu
    put:
      consumes:
      - application/json
      description: Update an existing menu item
      parameters:
      - description: Tenant ID
        in: header
        name: X-Tenant-ID
        required: true
        type: string
      - description: Menu ID
        in: path
        name: id
        required: true
        type: integer
      - description: Menu Data
        in: body
        name: menu
        required: true
        schema:
          $ref: '#/definitions/internal_handlers.UpdateMenuRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/internal_handlers.MenuResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/gin.H'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      security:
      - BearerAuth: []
      summary: Update a menu
      tags:
      - Menu
  /menus/by-role:
    get:
      description: Get menu items by role ID
      parameters:
      - description: Tenant ID
        in: header
        name: X-Tenant-ID
        required: true
        type: string
      - description: Role ID
        in: query
        name: role_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/internal_handlers.MenuResponse'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      security:
      - BearerAuth: []
      summary: Get menus by role
      tags:
      - Menu
  /menus/by-user/{user_id}:
    get:
      description: Get menu items by user ID
      parameters:
      - description: Tenant ID
        in: header
        name: X-Tenant-ID
        required: true
        type: string
      - description: User ID
        in: path
        name: user_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/internal_handlers.MenuResponse'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/gin.H'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/gin.H'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/gin.H'
      security:
      - BearerAuth: []
      summary: Get menus by user
      tags:
      - Menu
  /users:
    get:
      description: Get paginated list of users
      parameters:
      - description: Page number
        in: query
        name: page
        type: integer
      - description: Page size
        in: query
        name: size
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/internal_handlers.UserResponse'
            type: array
      summary: List users
      tags:
      - users
    post:
      consumes:
      - application/json
      description: Create a new user with the provided data
      parameters:
      - description: User data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/internal_handlers.CreateUserRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/internal_handlers.UserResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/internal_handlers.ErrorResponse'
      summary: Create new user
      tags:
      - users
  /users/{id}:
    delete:
      description: Delete user by ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/internal_handlers.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/internal_handlers.ErrorResponse'
      summary: Delete user
      tags:
      - users
    get:
      description: Get user details by user ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/internal_handlers.UserResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/internal_handlers.ErrorResponse'
      summary: Get user by ID
      tags:
      - users
    put:
      consumes:
      - application/json
      description: Update user details
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      - description: User data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/internal_handlers.UpdateUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/internal_handlers.UserResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/internal_handlers.ErrorResponse'
        "404":
          description: Not Found
          schema:
            $ref: '#/definitions/internal_handlers.ErrorResponse'
      summary: Update user
      tags:
      - users
securityDefinitions:
  BearerAuth:
    description: Type "Bearer" followed by a space and JWT token.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
