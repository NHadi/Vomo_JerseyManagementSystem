basePath: /api
definitions:
  backup.Backup:
    properties:
      created_at:
        type: string
      created_by:
        type: string
      file_name:
        type: string
      id:
        type: integer
      size:
        type: integer
      tenant_id:
        type: integer
    type: object
  handlers.AssignMenusRequest:
    type: object
  handlers.AssignPermissionsRequest:
    type: object
  handlers.AuditResponse:
    description: Audit trail entry response model
    properties:
      action:
        example: create
        type: string
      created_at:
        example: "2024-01-01 12:00:00"
        type: string
      created_by:
        example: john.doe@example.com
        type: string
      entity_id:
        example: 123
        type: integer
      entity_type:
        example: user
        type: string
      id:
        example: 1
        type: integer
      new_values: {}
      old_values: {}
      tenant_id:
        example: 1
        type: integer
    type: object
  handlers.CreateMenuRequest:
    description: Create menu request model
    properties:
      icon:
        example: ni ni-chart-bar-32
        type: string
      name:
        example: Dashboard
        type: string
      parent_id:
        example: 0
        type: integer
      sort:
        example: 1
        type: integer
      url:
        example: /dashboard
        type: string
    required:
    - name
    type: object
  handlers.CreateOfficeRequest:
    description: Create office request model
    properties:
      address:
        example: 123 Main St
        type: string
      code:
        example: MO001
        type: string
      email:
        example: main@office.com
        type: string
      name:
        example: Main Office
        type: string
      phone:
        example: "+1234567890"
        type: string
      zone_id:
        example: 1
        type: integer
    required:
    - code
    - email
    - name
    type: object
  handlers.CreatePermissionRequest:
    description: Create permission request model
    properties:
      description:
        example: Permission to create new users
        type: string
      name:
        example: CREATE_USER
        type: string
    required:
    - name
    type: object
  handlers.CreateRegionRequest:
    description: Create region request model
    properties:
      description:
        example: Northern region
        type: string
      name:
        example: North Region
        type: string
    required:
    - name
    type: object
  handlers.CreateRoleRequest:
    description: Create role request model
    properties:
      description:
        example: Administrator role with full access
        type: string
      name:
        example: Admin
        type: string
      permission_ids:
        example:
        - 1
        - 2
        - 3
        items:
          type: integer
        type: array
    required:
    - name
    type: object
  handlers.CreateUserRequest:
    description: Create user request model
    properties:
      email:
        example: john.doe@example.com
        type: string
      password:
        example: securepassword123
        type: string
      role_id:
        example: 1
        type: integer
      username:
        example: john.doe
        type: string
    required:
    - email
    - password
    - role_id
    - username
    type: object
  handlers.CreateZoneRequest:
    description: Create zone request model
    properties:
      description:
        example: Northern region zone
        type: string
      name:
        example: North Zone
        type: string
      region_id:
        example: 1
        type: integer
    required:
    - name
    type: object
  handlers.ErrorResponse:
    description: Standard error response model
    properties:
      error:
        example: Invalid request parameters
        type: string
    type: object
  handlers.LoginRequest:
    properties:
      email:
        type: string
      password:
        type: string
    required:
    - email
    - password
    type: object
  handlers.LoginResponse:
    properties:
      menus:
        items:
          $ref: '#/definitions/handlers.MenuResponse'
        type: array
      token:
        type: string
      user:
        $ref: '#/definitions/handlers.UserResponse'
    type: object
  handlers.MenuResponse:
    description: Menu item response model
    properties:
      children:
        items:
          $ref: '#/definitions/handlers.MenuResponse'
        type: array
      created_at:
        example: "2024-01-01T12:00:00Z"
        type: string
      created_by:
        example: john.doe@example.com
        type: string
      icon:
        example: ni ni-chart-bar-32
        type: string
      id:
        example: 1
        type: integer
      name:
        example: Dashboard
        type: string
      parent_id:
        example: 0
        type: integer
      sort:
        example: 1
        type: integer
      tenant_id:
        example: 1
        type: integer
      url:
        example: /dashboard
        type: string
    type: object
  handlers.OfficeResponse:
    description: Office response model
    properties:
      address:
        example: 123 Main St
        type: string
      code:
        example: MO001
        type: string
      created_at:
        example: "2024-03-24T21:41:49Z"
        type: string
      created_by:
        example: admin
        type: string
      email:
        example: main@office.com
        type: string
      id:
        example: 1
        type: integer
      name:
        example: Main Office
        type: string
      phone:
        example: "+1234567890"
        type: string
      tenant_id:
        example: 1
        type: integer
      updated_at:
        example: "2024-03-24T21:41:49Z"
        type: string
      updated_by:
        example: admin
        type: string
      zone_id:
        example: 1
        type: integer
    type: object
  handlers.PermissionResponse:
    description: Permission response model
    properties:
      created_at:
        example: "2024-03-24T21:41:49Z"
        type: string
      created_by:
        example: admin
        type: string
      description:
        example: Permission to create new users
        type: string
      id:
        example: 1
        type: integer
      name:
        example: CREATE_USER
        type: string
      tenant_id:
        example: 1
        type: integer
      updated_at:
        example: "2024-03-24T21:41:49Z"
        type: string
      updated_by:
        example: admin
        type: string
    type: object
  handlers.RegionResponse:
    description: Region response model
    properties:
      created_at:
        example: "2024-03-24T21:41:49Z"
        type: string
      created_by:
        example: admin
        type: string
      description:
        example: Northern region
        type: string
      id:
        example: 1
        type: integer
      name:
        example: North Region
        type: string
      tenant_id:
        example: 1
        type: integer
      updated_at:
        example: "2024-03-24T21:41:49Z"
        type: string
      updated_by:
        example: admin
        type: string
    type: object
  handlers.RoleResponse:
    description: Role response model
    properties:
      created_at:
        example: "2024-01-01T12:00:00Z"
        type: string
      created_by:
        example: john.doe@example.com
        type: string
      description:
        example: Administrator role with full access
        type: string
      id:
        example: 1
        type: integer
      menus:
        items:
          $ref: '#/definitions/handlers.MenuResponse'
        type: array
      name:
        example: Admin
        type: string
      permissions:
        items:
          $ref: '#/definitions/handlers.PermissionResponse'
        type: array
      tenant_id:
        example: 1
        type: integer
      updated_at:
        example: "2024-01-01T12:00:00Z"
        type: string
      updated_by:
        example: john.doe@example.com
        type: string
    type: object
  handlers.SuccessResponse:
    description: Standard success response model
    properties:
      message:
        example: Operation completed successfully
        type: string
    type: object
  handlers.UpdateMenuRequest:
    description: Update menu request model
    properties:
      icon:
        example: ni ni-chart-bar-32
        type: string
      name:
        example: Dashboard
        type: string
      parent_id:
        example: 0
        type: integer
      sort:
        example: 1
        type: integer
      url:
        example: /dashboard
        type: string
    required:
    - name
    type: object
  handlers.UpdateOfficeRequest:
    description: Update office request model
    properties:
      address:
        example: 123 Main St
        type: string
      code:
        example: MO001
        type: string
      email:
        example: main@office.com
        type: string
      name:
        example: Main Office
        type: string
      phone:
        example: "+1234567890"
        type: string
      zone_id:
        example: 1
        type: integer
    required:
    - code
    - email
    - name
    type: object
  handlers.UpdatePermissionRequest:
    description: Update permission request model
    properties:
      description:
        example: Permission to create new users
        type: string
      name:
        example: CREATE_USER
        type: string
    required:
    - name
    type: object
  handlers.UpdateRegionRequest:
    description: Update region request model
    properties:
      description:
        example: Northern region
        type: string
      name:
        example: North Region
        type: string
    required:
    - name
    type: object
  handlers.UpdateRoleRequest:
    description: Update role request model
    properties:
      description:
        example: Administrator role with full access
        type: string
      name:
        example: Admin
        type: string
      permission_ids:
        example:
        - 1
        - 2
        - 3
        items:
          type: integer
        type: array
    required:
    - name
    type: object
  handlers.UpdateUserRequest:
    description: Update user request model
    properties:
      email:
        example: john.doe@example.com
        type: string
      username:
        example: john.doe
        type: string
    required:
    - email
    - username
    type: object
  handlers.UpdateZoneRequest:
    description: Update zone request model
    properties:
      description:
        example: Northern region zone
        type: string
      name:
        example: North Zone
        type: string
      region_id:
        example: 1
        type: integer
    required:
    - name
    type: object
  handlers.UserResponse:
    description: User response model
    properties:
      created_at:
        example: "2024-03-24T21:41:49Z"
        type: string
      created_by:
        example: admin
        type: string
      email:
        example: john.doe@example.com
        type: string
      id:
        example: 123e4567-e89b-12d3-a456-426614174000
        type: string
      role_id:
        example: 1
        type: integer
      tenant_id:
        example: 1
        type: integer
      updated_at:
        example: "2024-03-24T21:41:49Z"
        type: string
      updated_by:
        example: admin
        type: string
      username:
        example: john.doe
        type: string
    type: object
  handlers.ZoneResponse:
    description: Zone response model
    properties:
      created_at:
        example: "2024-03-24T21:41:49Z"
        type: string
      created_by:
        example: admin
        type: string
      description:
        example: Northern region zone
        type: string
      id:
        example: 1
        type: integer
      name:
        example: North Zone
        type: string
      region_id:
        example: 1
        type: integer
      tenant_id:
        example: 1
        type: integer
      updated_at:
        example: "2024-03-24T21:41:49Z"
        type: string
      updated_by:
        example: admin
        type: string
    type: object
host: localhost:8080
info:
  contact:
    email: support@swagger.io
    name: API Support
    url: http://www.swagger.io/support
  description: Vomo backend API documentation
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: Vomo API
  version: "1.0"
paths:
  /audits/date-range:
    get:
      consumes:
      - application/json
      description: Get audit history within a specific date range
      parameters:
      - description: Tenant ID
        in: header
        name: X-Tenant-ID
        required: true
        type: string
      - description: Start Date (YYYY-MM-DD)
        in: query
        name: start_date
        required: true
        type: string
      - description: End Date (YYYY-MM-DD)
        in: query
        name: end_date
        required: true
        type: string
      - description: Filter by Entity Type
        in: query
        name: entity_type
        type: string
      - description: Filter by Action
        in: query
        name: action
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/handlers.AuditResponse'
            type: array
        "400":
          description: Invalid request parameters
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get audit history by date range
      tags:
      - Audit
  /audits/entity/{type}/{id}:
    get:
      consumes:
      - application/json
      description: Get audit history for a specific entity
      parameters:
      - description: Tenant ID
        in: header
        name: X-Tenant-ID
        required: true
        type: string
      - description: Entity Type
        in: path
        name: type
        required: true
        type: string
      - description: Entity ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/handlers.AuditResponse'
            type: array
        "400":
          description: Invalid request parameters
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get entity audit history
      tags:
      - Audit
  /audits/tenant/{id}:
    get:
      consumes:
      - application/json
      description: Get audit history for a specific tenant
      parameters:
      - description: Tenant ID
        in: header
        name: X-Tenant-ID
        required: true
        type: string
      - description: Tenant ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/handlers.AuditResponse'
            type: array
        "400":
          description: Invalid request parameters
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get tenant audit history
      tags:
      - Audit
  /auth/login:
    post:
      consumes:
      - application/json
      description: Authenticate user with email and password
      parameters:
      - description: Login Credentials
        in: body
        name: credentials
        required: true
        schema:
          $ref: '#/definitions/handlers.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.LoginResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      summary: User login
      tags:
      - auth
  /backups:
    get:
      consumes:
      - application/json
      description: Get a list of all available backups
      parameters:
      - description: Tenant ID
        in: header
        name: X-Tenant-ID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/backup.Backup'
            type: array
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: List all backups
      tags:
      - backup
    post:
      consumes:
      - application/json
      description: Create a new backup of the database
      parameters:
      - description: Tenant ID
        in: header
        name: X-Tenant-ID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/backup.Backup'
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Create a new database backup
      tags:
      - backup
  /backups/{id}:
    delete:
      consumes:
      - application/json
      description: Delete a specific backup
      parameters:
      - description: Tenant ID
        in: header
        name: X-Tenant-ID
        required: true
        type: string
      - description: Backup ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Delete a backup
      tags:
      - backup
  /backups/{id}/restore:
    post:
      consumes:
      - application/json
      description: Restore the database from a specific backup
      parameters:
      - description: Tenant ID
        in: header
        name: X-Tenant-ID
        required: true
        type: string
      - description: Backup ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: Internal Server Error
          schema:
            additionalProperties:
              type: string
            type: object
      security:
      - BearerAuth: []
      summary: Restore from a backup
      tags:
      - backup
  /menus:
    get:
      description: Get all menu items
      parameters:
      - description: Tenant ID
        in: header
        name: X-Tenant-ID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/handlers.MenuResponse'
            type: array
        "400":
          description: Invalid request parameters
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get all menus
      tags:
      - Menu
    post:
      consumes:
      - application/json
      description: Create a new menu item
      parameters:
      - description: Tenant ID
        in: header
        name: X-Tenant-ID
        required: true
        type: string
      - description: Menu Data
        in: body
        name: menu
        required: true
        schema:
          $ref: '#/definitions/handlers.CreateMenuRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/handlers.MenuResponse'
        "400":
          description: Invalid request parameters
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create a new menu
      tags:
      - Menu
  /menus/{id}:
    delete:
      description: Delete an existing menu item
      parameters:
      - description: Tenant ID
        in: header
        name: X-Tenant-ID
        required: true
        type: string
      - description: Menu ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.SuccessResponse'
        "400":
          description: Invalid request parameters
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Menu not found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete a menu
      tags:
      - Menu
    get:
      description: Get menu details by ID
      parameters:
      - description: Tenant ID
        in: header
        name: X-Tenant-ID
        required: true
        type: string
      - description: Menu ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.MenuResponse'
        "400":
          description: Invalid request parameters
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Menu not found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get a menu by ID
      tags:
      - Menu
    put:
      consumes:
      - application/json
      description: Update an existing menu item
      parameters:
      - description: Tenant ID
        in: header
        name: X-Tenant-ID
        required: true
        type: string
      - description: Menu ID
        in: path
        name: id
        required: true
        type: integer
      - description: Menu Data
        in: body
        name: menu
        required: true
        schema:
          $ref: '#/definitions/handlers.UpdateMenuRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.MenuResponse'
        "400":
          description: Invalid request parameters
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Menu not found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update a menu
      tags:
      - Menu
  /menus/by-role:
    get:
      description: Get menu items by role ID
      parameters:
      - description: Tenant ID
        in: header
        name: X-Tenant-ID
        required: true
        type: string
      - description: Role ID
        in: query
        name: role_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/handlers.MenuResponse'
            type: array
        "400":
          description: Invalid request parameters
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get menus by role
      tags:
      - Menu
  /menus/by-user/{user_id}:
    get:
      description: Get menu items by user ID
      parameters:
      - description: Tenant ID
        in: header
        name: X-Tenant-ID
        required: true
        type: string
      - description: User ID
        in: path
        name: user_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/handlers.MenuResponse'
            type: array
        "400":
          description: Invalid request parameters
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get menus by user
      tags:
      - Menu
  /offices:
    get:
      description: Get all offices
      parameters:
      - description: Tenant ID
        in: header
        name: X-Tenant-ID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/handlers.OfficeResponse'
            type: array
        "400":
          description: Invalid request parameters
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get all offices
      tags:
      - Office
    post:
      consumes:
      - application/json
      description: Create a new office with the provided details
      parameters:
      - description: Tenant ID
        in: header
        name: X-Tenant-ID
        required: true
        type: string
      - description: Office Data
        in: body
        name: office
        required: true
        schema:
          $ref: '#/definitions/handlers.CreateOfficeRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/handlers.OfficeResponse'
        "400":
          description: Invalid request parameters
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create a new office
      tags:
      - Office
  /offices/{id}:
    delete:
      description: Delete an existing office
      parameters:
      - description: Tenant ID
        in: header
        name: X-Tenant-ID
        required: true
        type: string
      - description: Office ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.SuccessResponse'
        "400":
          description: Invalid request parameters
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Office not found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete an office
      tags:
      - Office
    get:
      description: Get office details by ID
      parameters:
      - description: Tenant ID
        in: header
        name: X-Tenant-ID
        required: true
        type: string
      - description: Office ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.OfficeResponse'
        "400":
          description: Invalid request parameters
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Office not found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get an office by ID
      tags:
      - Office
    put:
      consumes:
      - application/json
      description: Update an existing office with new details
      parameters:
      - description: Tenant ID
        in: header
        name: X-Tenant-ID
        required: true
        type: string
      - description: Office ID
        in: path
        name: id
        required: true
        type: integer
      - description: Office Data
        in: body
        name: office
        required: true
        schema:
          $ref: '#/definitions/handlers.UpdateOfficeRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.OfficeResponse'
        "400":
          description: Invalid request parameters
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Office not found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update an office
      tags:
      - Office
  /offices/by-zone:
    get:
      description: Get all offices for a specific zone
      parameters:
      - description: Tenant ID
        in: header
        name: X-Tenant-ID
        required: true
        type: string
      - description: Zone ID
        in: query
        name: zone_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/handlers.OfficeResponse'
            type: array
        "400":
          description: Invalid request parameters
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get offices by zone
      tags:
      - Office
  /permissions:
    get:
      description: Get all permissions
      parameters:
      - description: Tenant ID
        in: header
        name: X-Tenant-ID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/handlers.PermissionResponse'
            type: array
        "400":
          description: Invalid request parameters
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get all permissions
      tags:
      - Permission
    post:
      consumes:
      - application/json
      description: Create a new permission with the provided details
      parameters:
      - description: Tenant ID
        in: header
        name: X-Tenant-ID
        required: true
        type: string
      - description: Permission Data
        in: body
        name: permission
        required: true
        schema:
          $ref: '#/definitions/handlers.CreatePermissionRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/handlers.PermissionResponse'
        "400":
          description: Invalid request parameters
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create a new permission
      tags:
      - Permission
  /permissions/{id}:
    delete:
      description: Delete an existing permission
      parameters:
      - description: Tenant ID
        in: header
        name: X-Tenant-ID
        required: true
        type: string
      - description: Permission ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.SuccessResponse'
        "400":
          description: Invalid request parameters
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Permission not found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete a permission
      tags:
      - Permission
    get:
      description: Get permission details by ID
      parameters:
      - description: Tenant ID
        in: header
        name: X-Tenant-ID
        required: true
        type: string
      - description: Permission ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.PermissionResponse'
        "400":
          description: Invalid request parameters
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Permission not found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get a permission by ID
      tags:
      - Permission
    put:
      consumes:
      - application/json
      description: Update an existing permission with new details
      parameters:
      - description: Tenant ID
        in: header
        name: X-Tenant-ID
        required: true
        type: string
      - description: Permission ID
        in: path
        name: id
        required: true
        type: integer
      - description: Permission Data
        in: body
        name: permission
        required: true
        schema:
          $ref: '#/definitions/handlers.UpdatePermissionRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.PermissionResponse'
        "400":
          description: Invalid request parameters
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Permission not found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update a permission
      tags:
      - Permission
  /regions:
    get:
      description: Get all regions
      parameters:
      - description: Tenant ID
        in: header
        name: X-Tenant-ID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/handlers.RegionResponse'
            type: array
        "400":
          description: Invalid request parameters
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get all regions
      tags:
      - Region
    post:
      consumes:
      - application/json
      description: Create a new region with the provided details
      parameters:
      - description: Tenant ID
        in: header
        name: X-Tenant-ID
        required: true
        type: string
      - description: Region Data
        in: body
        name: region
        required: true
        schema:
          $ref: '#/definitions/handlers.CreateRegionRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/handlers.RegionResponse'
        "400":
          description: Invalid request parameters
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create a new region
      tags:
      - Region
  /regions/{id}:
    delete:
      description: Delete an existing region
      parameters:
      - description: Tenant ID
        in: header
        name: X-Tenant-ID
        required: true
        type: string
      - description: Region ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.SuccessResponse'
        "400":
          description: Invalid request parameters
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Region not found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete a region
      tags:
      - Region
    get:
      description: Get region details by ID
      parameters:
      - description: Tenant ID
        in: header
        name: X-Tenant-ID
        required: true
        type: string
      - description: Region ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.RegionResponse'
        "400":
          description: Invalid request parameters
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Region not found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get a region by ID
      tags:
      - Region
    put:
      consumes:
      - application/json
      description: Update an existing region with new details
      parameters:
      - description: Tenant ID
        in: header
        name: X-Tenant-ID
        required: true
        type: string
      - description: Region ID
        in: path
        name: id
        required: true
        type: integer
      - description: Region Data
        in: body
        name: region
        required: true
        schema:
          $ref: '#/definitions/handlers.UpdateRegionRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.RegionResponse'
        "400":
          description: Invalid request parameters
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Region not found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update a region
      tags:
      - Region
  /roles:
    get:
      description: Get a list of all roles with their permissions and menus
      parameters:
      - description: Tenant ID
        in: header
        name: X-Tenant-ID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/handlers.RoleResponse'
            type: array
        "400":
          description: Invalid request parameters
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get all roles
      tags:
      - Role
    post:
      consumes:
      - application/json
      description: Create a new role with specified permissions
      parameters:
      - description: Tenant ID
        in: header
        name: X-Tenant-ID
        required: true
        type: string
      - description: Role Data
        in: body
        name: role
        required: true
        schema:
          $ref: '#/definitions/handlers.CreateRoleRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/handlers.RoleResponse'
        "400":
          description: Invalid request parameters
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create a new role
      tags:
      - Role
  /roles/{id}:
    delete:
      description: Delete an existing role
      parameters:
      - description: Tenant ID
        in: header
        name: X-Tenant-ID
        required: true
        type: string
      - description: Role ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.SuccessResponse'
        "400":
          description: Invalid request parameters
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Role not found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete a role
      tags:
      - Role
    get:
      description: Get role details by ID
      parameters:
      - description: Tenant ID
        in: header
        name: X-Tenant-ID
        required: true
        type: string
      - description: Role ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.RoleResponse'
        "400":
          description: Invalid request parameters
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Role not found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get a role by ID
      tags:
      - Role
    put:
      consumes:
      - application/json
      description: Update an existing role
      parameters:
      - description: Tenant ID
        in: header
        name: X-Tenant-ID
        required: true
        type: string
      - description: Role ID
        in: path
        name: id
        required: true
        type: integer
      - description: Role Data
        in: body
        name: role
        required: true
        schema:
          $ref: '#/definitions/handlers.UpdateRoleRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.RoleResponse'
        "400":
          description: Invalid request parameters
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Role not found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update a role
      tags:
      - Role
  /roles/{id}/menus:
    post:
      consumes:
      - application/json
      description: Assign multiple menus to a role
      parameters:
      - description: Tenant ID
        in: header
        name: X-Tenant-ID
        required: true
        type: string
      - description: Role ID
        in: path
        name: id
        required: true
        type: integer
      - description: Menu IDs to assign
        in: body
        name: menus
        required: true
        schema:
          $ref: '#/definitions/handlers.AssignMenusRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.SuccessResponse'
        "400":
          description: Invalid request parameters
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Role not found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Assign menus to a role
      tags:
      - Role
  /roles/{id}/permissions:
    delete:
      consumes:
      - application/json
      description: Remove a list of permissions from a specific role
      parameters:
      - description: Tenant ID
        in: header
        name: X-Tenant-ID
        required: true
        type: string
      - description: Role ID
        in: path
        name: id
        required: true
        type: integer
      - description: List of permission IDs
        in: body
        name: permissions
        required: true
        schema:
          $ref: '#/definitions/handlers.AssignPermissionsRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.SuccessResponse'
        "400":
          description: Invalid request parameters
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Role not found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Remove permissions from a role
      tags:
      - Permission
    post:
      consumes:
      - application/json
      description: Assign a list of permissions to a specific role
      parameters:
      - description: Tenant ID
        in: header
        name: X-Tenant-ID
        required: true
        type: string
      - description: Role ID
        in: path
        name: id
        required: true
        type: integer
      - description: List of permission IDs
        in: body
        name: permissions
        required: true
        schema:
          $ref: '#/definitions/handlers.AssignPermissionsRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.SuccessResponse'
        "400":
          description: Invalid request parameters
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Role not found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Assign permissions to a role
      tags:
      - Permission
  /users:
    get:
      description: Get a list of all users
      parameters:
      - description: Tenant ID
        in: header
        name: X-Tenant-ID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/handlers.UserResponse'
            type: array
        "400":
          description: Invalid request parameters
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get all users
      tags:
      - User
    post:
      consumes:
      - application/json
      description: Create a new user with the provided details
      parameters:
      - description: Tenant ID
        in: header
        name: X-Tenant-ID
        required: true
        type: string
      - description: User Data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/handlers.CreateUserRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/handlers.UserResponse'
        "400":
          description: Invalid request parameters
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create a new user
      tags:
      - User
  /users/{id}:
    delete:
      description: Delete an existing user
      parameters:
      - description: Tenant ID
        in: header
        name: X-Tenant-ID
        required: true
        type: string
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.SuccessResponse'
        "400":
          description: Invalid request parameters
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete a user
      tags:
      - User
    get:
      description: Get user details by ID
      parameters:
      - description: Tenant ID
        in: header
        name: X-Tenant-ID
        required: true
        type: string
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.UserResponse'
        "400":
          description: Invalid request parameters
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get a user by ID
      tags:
      - User
    put:
      consumes:
      - application/json
      description: Update an existing user with new details
      parameters:
      - description: Tenant ID
        in: header
        name: X-Tenant-ID
        required: true
        type: string
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      - description: User Data
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/handlers.UpdateUserRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.UserResponse'
        "400":
          description: Invalid request parameters
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: User not found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update a user
      tags:
      - User
  /zones:
    get:
      description: Get all zones
      parameters:
      - description: Tenant ID
        in: header
        name: X-Tenant-ID
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/handlers.ZoneResponse'
            type: array
        "400":
          description: Invalid request parameters
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get all zones
      tags:
      - Zone
    post:
      consumes:
      - application/json
      description: Create a new zone with the provided details
      parameters:
      - description: Tenant ID
        in: header
        name: X-Tenant-ID
        required: true
        type: string
      - description: Zone Data
        in: body
        name: zone
        required: true
        schema:
          $ref: '#/definitions/handlers.CreateZoneRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/handlers.ZoneResponse'
        "400":
          description: Invalid request parameters
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Create a new zone
      tags:
      - Zone
  /zones/{id}:
    delete:
      description: Delete an existing zone
      parameters:
      - description: Tenant ID
        in: header
        name: X-Tenant-ID
        required: true
        type: string
      - description: Zone ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.SuccessResponse'
        "400":
          description: Invalid request parameters
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Zone not found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Delete a zone
      tags:
      - Zone
    get:
      description: Get zone details by ID
      parameters:
      - description: Tenant ID
        in: header
        name: X-Tenant-ID
        required: true
        type: string
      - description: Zone ID
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.ZoneResponse'
        "400":
          description: Invalid request parameters
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Zone not found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get a zone by ID
      tags:
      - Zone
    put:
      consumes:
      - application/json
      description: Update an existing zone with new details
      parameters:
      - description: Tenant ID
        in: header
        name: X-Tenant-ID
        required: true
        type: string
      - description: Zone ID
        in: path
        name: id
        required: true
        type: integer
      - description: Zone Data
        in: body
        name: zone
        required: true
        schema:
          $ref: '#/definitions/handlers.UpdateZoneRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/handlers.ZoneResponse'
        "400":
          description: Invalid request parameters
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "404":
          description: Zone not found
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Update a zone
      tags:
      - Zone
  /zones/by-region:
    get:
      description: Get all zones for a specific region
      parameters:
      - description: Tenant ID
        in: header
        name: X-Tenant-ID
        required: true
        type: string
      - description: Region ID
        in: query
        name: region_id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/handlers.ZoneResponse'
            type: array
        "400":
          description: Invalid request parameters
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "403":
          description: Forbidden
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
        "500":
          description: Internal server error
          schema:
            $ref: '#/definitions/handlers.ErrorResponse'
      security:
      - BearerAuth: []
      summary: Get zones by region
      tags:
      - Zone
produces:
- application/json
schemes:
- http
- https
securityDefinitions:
  BearerAuth:
    description: Type "Bearer" followed by a space and JWT token.
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
